{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Card.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Header","Card","props","src","image","onClick","imageClick","id","Container","state","clickedArr","winsTracker","lossTracker","newClick","setState","this","console","log","arr","filter","item","index","indexOf","newLoses","alert","length","newWin","newImgArr","tempValue","randomIndex","currentIndex","Math","floor","random","shuffle","Pics","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a53cb4df.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => (\n\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-primary row text-center\">\n    <a className=\"navbar-brand col-sm\" href=\"/\"><h3>Clicky Game</h3></a>\n    <h3 className=\"col-sm\">\n      Click an image to begin!\n    </h3>\n  </nav>\n);\n\nexport default Navbar;","import React from 'react';\n\nconst Header = () => (\n  <div className=\"container\">\n    <div className=\"jumbotron text-center\">\n      <h1>Clicky Game!</h1>\n      <br />\n      <h5 className=\"header light white-text\">Click on an image, but don't click on any more than once!</h5>\n    </div>\n  </div>\n);\n\nexport default Header;","import React from 'react';\n\nconst Card = (props) => (\n\n    <div className=\"gallery col-md\">\n      <img src={props.image} onClick={() => props.imageClick(props.id)}/>\n    </div>\n\n);\n\nexport default Card;","import React, {Component} from 'react';\nimport \"./container.css\"\nimport Pics from '../assets/images.json'\nimport Card from './Card.js'\n\nclass Container extends Component {\n  state = {\n    clickedArr: [],\n    winsTracker: 0,\n    lossTracker: 0\n  }\n\n  imageClick = (id) => {\n    let newClick = this.state.clickedArr;\n    \n    this.setState({\n      clickedArr: [\n        ...newClick,\n        id\n      ]\n    })\n  }\n\n  componentDidUpdate() {\n    let newClick = this.state.clickedArr;\n    console.log(newClick)\n    let findDuplicate = arr => arr.filter((item, index) => arr.indexOf(item) !== index);\n    let duplicates = findDuplicate(newClick);\n\n    if (duplicates[0]) {\n      let newLoses = this.state.lossTracker + 1;\n      alert(`You Lost! You clicked ${newClick.length - 1} unique photos. Try again!`)\n      this.setState({clickedArr: [], lossTracker: newLoses});\n    } else if (newClick.length === 12) {\n      let newWin = this.state.winsTracker + 1;\n      alert(`You Won! Your memory is bananas.`)\n      this.setState({clickedArr: [], winsTracker: newWin});\n    }\n  }\n\n  render() {\n    function shuffle(arr) {\n      let currentIndex = arr.length,\n        tempValue,\n        randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        tempValue = arr[currentIndex];\n        arr[currentIndex] = arr[randomIndex];\n        arr[randomIndex] = tempValue;\n      }\n      return (arr)\n    }\n\n    let newImgArr = shuffle(Pics);\n\n    return (\n      <div className=\"container\">\n        <div>\n          <h3 className=\"text-center\">\n            Wins: {this.state.winsTracker} | Losses: {this.state.lossTracker}\n          </h3>\n        </div>\n        <div className=\"row\">\n          <Card id={newImgArr[0].id} image={newImgArr[0].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[1].id} image={newImgArr[1].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[2].id} image={newImgArr[2].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[3].id} image={newImgArr[3].image} imageClick = {this.imageClick} />\n        </div>\n        <div className=\"row\">\n          <Card id={newImgArr[4].id} image={newImgArr[4].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[5].id} image={newImgArr[5].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[6].id} image={newImgArr[6].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[7].id} image={newImgArr[7].image} imageClick = {this.imageClick} />\n        </div>\n        <div className=\"row\">\n          <Card id={newImgArr[8].id} image={newImgArr[8].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[9].id} image={newImgArr[9].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[10].id} image={newImgArr[10].image} imageClick = {this.imageClick} />\n          <Card id={newImgArr[11].id} image={newImgArr[11].image} imageClick = {this.imageClick} />\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default Container;","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Header from './components/Header'\nimport Container from './components/container'\n\nconst App = () => \n<div>\n  <Navbar />\n  <br/>\n  <Header />\n  <Container />\n</div>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}